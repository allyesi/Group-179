# d = dict(short="dikt", long="dictionary")
# d_2 = dict([(1, 1), (2, 4)])
# print(d, "\n", d_2)
# ответ
#{'short': 'dikt', 'long': 'dictionary'}
# {1: 1, 2: 4}
# при разных ключах и одинаковых значениях
# d = dict.fromkeys(["a", "b"])
# d_2 = dict.fromkeys(["a", "b"], 100)
# print(d, "\n", d_2)
#
# d = {} #словарь
# d = {"a":1,"b":2}
# print(d)
# d = {a: a**2 for a in range(7)}
# print(d)
# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36}
# d4 = {i:i for i in range(10)}
# print(d4)
# {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}
# d3 = {i ** 2: i for i in [7, 2, 5]}
# print(d3)
# d = { 1: "one", 2: "two"}
# d[3] = "three"
# # # # print(d) #{1: 'one', 2: 'two', 3: 'three'}
# d.update({4: "four"})
# d[1] = "one elem"
# # print(d) # {1: 'one elem', 2: 'two', 3: 'three', 4: 'four'}
# print(d.get(1,"no element")) # one elem
# del d[1]
# d.pop(2)
# print(d)
# value = d.pop(4)
# print(value)
# d = {1:"one",2:"two"}
# # print(d.keys())  # dict_keys([1, 2])
# print(list(d.keys())) # список
# print(d.values()) # dict_values(['one', 'two'])
# if "one" in d.values():   # проверяет есть ли значение
#     print("yes")
# print(d.items())   # для перебора по ключам и значениям dict_items([(1, "one"),(2, "two")])
# d.clear()  # удаление элементов
# d1 = d.copy()
# print(d1)

# Операция in определение наличия ключа в словаре
# Исходный словарь
# salary = {"Direktor": 120000,
#           "manager": 23000,
#           "secretary": 50000}
# print(salary) # {'Direktor': 120000, 'manager': 23000, 'secretary': 50000}
# Удалить элемент по ключу "secretary" c проверкой
# key = "secretary"
# if key in salary:
#     del salary["secretary"]
#     print(salary) #{'Direktor': 120000, 'manager': 23000}
# удаление элемента из словаря
# del salary["secretary"]
# print(salary)   #{'Direktor': 120000, 'manager': 23000}


# ОПЕРАЦИЯ not in ОПРЕДЕЛЕНИЕ ОТСТУТСТВИЯ КЛЮЧА В СЛОВАРЕ
# ФОРМИРОВАНИЕ СЛОВАРЯ С ИХ ЧИСЛОВЫМ ЭКВИВАЛЕНТОМ
# 1) ФОРМИРУЕМ ПУСТОЙ СЛОВАРЬ
# WORDS = dict() # WORDS = {}
# #2) ВВЕСТИ КОЛИЧЕСТВО СЛОВ В СЛОВАРЕ
# count = int(input("количество слов в словаре:"))
# #3) ЦИКЛ ДОБАВЛЕНИЯ СЛОВ
# i = 0
# while i < count:
#     print("ввод слов")
#     wrd = str(input("Слово:"))
#     value = int(input("Значение:"))
#     # если ключа wrd нет в словаре, то добавить пару [wrd:value]
#     if wrd not in WORDS:
#         WORDS[wrd] = value
#     i = i + 1
# # Вывести сформированный словарь
# print(WORDS)
#             ОТВЕТ
# количество слов в словаре:3
# ввод слов
# Слово:wry
# Значение:2
# ввод слов
# Слово:ert
# Значение:3
# ввод слов
# Слово:rty
# Значение:1
# {'wry': 2, 'ert': 3, 'rty': 1}
# ВСТРОЕННАЯ ФУНКЦИЯ ZIP
# СОЗДАНИЕ СЛОВАРЯ ИЗ СПИСКОВ КЛЮЧЕЙ И ЗНАЧЕНИЙ
# numbers = dict(zip([1,2,3],["one","two","three"]))
# print(numbers) #{1: 'one', 2: 'two', 3: 'three'}

# ОБХОД СЛОВАРЯ С ПОМОЩЬЮ ЦИКЛА FOR
# ИСХОДНЫЙ СЛОВАРЬ
# MONTHS = {1:"jan",2:"feb",3:"marth",4:"april"}
# # ЦИКЛ FOR ОБХОД СЛОВАРЯ
# # В ЦИКЛЕ mn - ключ, MONTHS[mn] - значение
# for mn in MONTHS:
#     print(mn,":",MONTHS[mn])

# СОРТИРОВКА СЛОВАРЯ
# A = {"R":10,"B":2,"C":23} # ИСХОДНЫЙ СЛОВАРЬ
# # #СОРТИРОВКА ПО КЛЮЧАМ
# ak = A.keys()  #dict_keys(['R', 'B', 'C']) получаем представление ключей
# list_ak = list(ak)  # ['R', 'B', 'C'] конвертируем представление ak в список
# list_ak.sort()   # ['B', 'C', 'R']  сортируем список ключей
# # # 4) Вывести перечень (ключ:значение) в отсортированном порядке сформировать
# # # новый словарь
# b = {}
# for k in list_ak:
#     print("(",k,":", A[k],")")  # ( B : 2 )( C : 23 ) ( R : 10 )
#     b[k] = A[k]
# print(b)   # {'B': 2, 'C': 23, 'R': 10}
# Задание № 1
# Создайте словарь person, в котором будут присутствовать ключи name, age, city.
# Выведите значение возраста из словаря person.
# person = {"name": "Alice", "age": 28, "city": "Minsk"}
# print(person["age"])
# Задание №2
# Значениями словаря могут быть и списки.
# Создайте словарь с ключами BMW, Tesla и списками из 3х моделей в качестве значений.
# Выведите первое и последнее значения каждого из ключей.
# cars = {"BMW": ["Model_1","Model_2","Model_3"],
#         "Tesla": ["Model_a","Model_b","Model_c"]}
# print(cars["BMW"][0],cars["BMW"][2])
# print(cars["Tesla"][0],cars["Tesla"][2])
# Задание №3
# Исправьте ошибки в коде, чтобы получить требуемый вывод. (Вывод True)
# d1 = {"a": 100, "b": 200, "c":300}
# d2 = {"a": 300, "b": 200, "d":400}
# print(d1["b"] == d2["b"])
# Задание № 4
# Дан словарь с числовыми значениями. Необходимо их все перемножить и вывести на экран
# d = {"a": 1, "b": 2, "c": 5, "f": 9}
# result = 1
# for key in d:
#     result = result * d[key]
# print(result)
# Задание №5
# Даны два списка одинаковой длины. Необходимо создать из них словарь таким образом,
# чтобы элементы первого списка были ключами, а элементы второго — соответственно
# значениями нашего словаря.
# keys = ["bad","cat","set"]
# values = [1,2,3]
# d = dict(zip(keys,values))
# print(d)
# Задание №6
# Создайте словарь из строки 'pythonist' следующим образом: в качестве ключей
# возьмите буквы строки, а значениями пусть будут числа, соответствующие
# количеству вхождений данной буквы в строку.
# str = "pythonist"
# d = {i: str.count(i) for i in str}
# print(d)  # {'p': 1, 'y': 1, 't': 2, 'h': 1, 'o': 1, 'n': 1, 'i': 1, 's': 1}
# №1
# У вас есть словарь, где ключ – название продукта. Значение – список,
# который содержит цену и кол-во товара.
# Выведите через ‘’–’’ название – цену – количество.
# С клавиатуры вводите название товара и его кол-во. n – выход из программы.
# Посчитать цену выбранных товаров и сколько товаров осталось в изначальном списке.
# goods = {"apple": [2.3, 5],
#          "pineapple": [3.5, 8],
#          "kiwi": [3.2, 5],
#          "melon": [3.4, 10]}
# for key, value in goods.items():  # запомнить когда нужны значения название словаря и .items()
#     print(key, "-", value[0], "-", value[1])
# cost = 0
# while True:
#     fruit = input("Название товара, (n - нет товара)")
#     if fruit == "n" and fruit not in goods.keys():  # fruit.keys() возвращает значение ключей словаря
#         break
#     quantity = int(input("Введите количество товара"))
#     if quantity > goods[fruit][1]:
#         print("У нас нет столько товара")
#         continue
#     cost = cost + goods[fruit][0] * quantity
#     goods[fruit][1] -= quantity
# print("цена", cost)
# print("_______________________________")
# for key, value in goods.items():
#     print(key, "-", value[0], "-", value[1])

# HOMEWORK
# 1.	Создайте словарь, связав его с переменной school, и наполните данными,
# которые бы отражали количество учащихся в разных 9 классах (9а, 9б, 9в, 9м, 9ф и т. п.).
# Внесите изменения в словарь согласно следующему:
# а) в одном из классов изменилось количество учащихся
# б) в школе появился новый класс.
# в) в школе был расформирован (удален) другой класс.
# г) Вычислите общее количество учащихся 9 классов в школе.
school = {"9a": 18,
          "9б": 19,
          "9в": 20,
          "9м": 19,
          "9ф": 20}
for key,value in school.items():
    print(key,":",value)
for key








# 2.	Вам дан словарь, состоящий из пар слов. Каждое слово является синонимом
# к парному ему слову. Все слова в словаре различны. Для введённого слова вывести
# его синоним или написать что его нет.
# D = {"first":["пламя","огонь"],
#      "second":["смелый","храбрый"],
#      "third":["еда","пища"]}
# for key,value in D.items():
#     print(key,":",value[0],",",value[1])
# while True:
#     word = input("введите слово:  ")
#     if word == D[word][0]:
#         print(D[word][1])
#     else:
#         print("Нет такого слова в словаре")
# n = input()
# for i in range(n):
#     s = input()
#     if s in d:
#         print(d[s])
#     else:
#         print("не найдено")
# d = {"смеяться": "хохотать",
#      "смелый": "храбрый"}
# a = input("ввести слово: ")
# for key in d:
#     if a == key:
#         print(f"синоним к слову {a} - {d[key]}")
#     elif a == d[key]:
#         print(f"синоним к слову {a} - {key}")
#     else:
#         print("синонима к слову нет")




# 3.	Коля устал запоминать телефонные номера и заказал у Вас программу,
# которая заменила бы ему телефонную книгу. Коля может послать программе
# два вида запросов: строку, содержащую имя контакта и его номер, разделенные
# пробелом, или просто имя контакта. В первом случае программа должна добавить
# в книгу новый номер, во втором – вывести номер контакта. Ввод происходит до
# символа точки. Если введенное имя уже содержится в списке контактов,
# необходимо перезаписать номер.
# Sample Input:
# Ben 89001234050
# Alice 210-220
# Alice
# Alice 404-502
# Ben
# Nick +4(908)273-22-42
# Nick
# Alice
# Robert 51234047129
# .
# Sample Output:
# 210-220
# 89001234050
# +4(908)273-22-42
# 404-502
## d = {}
# while True:
#     s = input()
#     if s == '.':
#         break
#
#     lst = s.split()
#     if len(lst) == 2:
#         d[lst[0]] = lst[1] Почему равно ?
#     else:
#         if lst[0] in d:
#             print(d[lst[0]])
#         else:
#             print("не найдено")

# 4.	Стремясь стать программистом, важно не только постоянно учиться,
# но и понимать язык, на котором говорят Ваши коллеги. Чтобы систематизировать
# знания, Вы решили написать программу, которая составляет маленький словарь
# из сленговых выражений. Программа принимает на вход строки до символа точки,
# состоящие из понятий и их определений, разделенных знаком тире. После
# заполнения словаря программе передается натуральное число m – количество
# запросов, а затем m строк, каждая из которых представляет собой одно понятие.
# Если это понятие есть в словаре, необходимо вывести его определение,
# в обратном случае – "Не найдено".
#
# Sample Input:
# DNS – компьютерная система для получения, хранения и обработки информации о доменных именах
# Интрасеть – это замкнутая внутренняя сеть какой-либо организации, работающая по Интернет-протоколу TCP/IP
# Фича – недокументированная дополнительная возможность, фишка
# Мейнфрейм – большой компьютер, имеющий высокую вычислительную мощность
# .
# 4
# Бэкап
# Фича
# Линуксоид
# DNS
# Sample Output:
# Не найдено
# недокументированная дополнительная возможность, фишка
# Не найдено
# компьютерная система для получения, хранения и обработки информации о доменных именах
#4 dict
# d = {}
# while True:
#     s = input()
#     if s == ".":
#         break
#     lst = s.split("-")
#     d[lst[0].rstrip()] = lst[1]
# n = int(input())
# for i in range(n):
#     s = input()
#     if s in d:
#         print(d[s])
#     else:
#         print("не найдено")
#
#
#
#
#
# Дополнительные задачи:
#
# 5.	Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов
# и в каком количестве используется в этой книге. Помогите Антону написать
# упрощённую версию такой программы, которая сможет подсчитать слова,
# разделённые пробелом и вывести получившуюся статистику. Программа должна
# считывать одну строку со стандартного ввода и выводить для каждого
# уникального слова в этой строке число его повторений (без учёта регистра)
# в формате "слово количество". Порядок вывода слов может быть произвольным,
# каждое уникальное слово должно выводиться только один раз.
# Sample Input 1:
# a aa abC aa ac abc bcd a
# Sample Output 1:
# ac 1
# a 2
# abc 2
# bcd 1
# aa 2
# Sample Input 2:
# a A a
# Sample Output 2:
# a 3
## 6.	Коля понял, что у многих из его знакомых есть несколько
# телефонных номеров и нельзя хранить только один из них.
# Он попросил доработать Вашу программу так, чтобы можно было
# добавлять к существующему контакту новый номер или даже несколько
# номеров, которые передаются через запятую.
#
#  По запросу телефонного номера должен выводиться весь список номеров
#  в порядке добавления, номера должны разделяться запятой. Если у контакта
#  нет телефонных номеров, должна выводиться строка "Не найдено".
# Sample Input:
# Ben 89001234050, +70504321009
# Alice 210-220
# Alice
# Alice 404-502, 894-005, 439-095
# Nick +16507811251
# Ben
# Alex +4(908)273-22-42
# Alice
# Nick
# Robert 51234047129, 92174043215
# Alex
# Robert
#
# Sample Output:
# 210-220
# 89001234050, +70504321009
# 210-220, 404-502, 894-005, 439-095
# +16507811251
# +4(908)273-22-42
# 51234047129, 92174043215
